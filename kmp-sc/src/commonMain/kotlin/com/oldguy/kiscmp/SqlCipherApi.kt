package com.oldguy.kiscmp

class SqliteException(message: String, apiName: String = "", result: Int = 0)
    : Throwable(fullText(message, apiName, result)) {
    val fullMessage = fullText(message, apiName, result)

    companion object {
        private fun fullText(message: String, apiName: String, result: Int): String {
            return "sqlite3 api: $apiName, result: $result, text: $message"
        }
    }
}

/**
 * See Sqlite "PRAGMA encoding;" doc
 */
enum class SqliteEncoding(val pragma: String) {
    Utf_8("UTF-8"),
    Utf_16("UTF-16"),
    Utf16LittleEndian("UTF-16le"),
    Utf16BigEndian("UTF-16be");
}

expect class SqliteDatabase() {
    var encoding: SqliteEncoding

    fun error(): String

    fun fileName(): String

    fun open(path: String, readOnly: Boolean = false, createOk: Boolean = false): Int

    fun close(): Int

    fun softHeapLimit(limit: Long): Long

    fun busyTimeout(timeout: Int)

    fun exec(sql: String): Int

    fun exec(
        sql: String, callback: ((
            values: Array<String>,
            columnNames: Array<String>
        ) -> Int)? = null
    ): Int

    fun version(): String

    /**
     * Useful after an Insert statement when a ROWID is expected to be generated by Sqlite during
     * the insert
     */
    fun lastInsertRowid(): Long

    fun sleep(millis: Int)
}

enum class SqliteColumnType {
    Null, Integer, Text, Float, Blob
}

enum class SqliteStepResult {
    Done, Row, Busy, Error
}

expect class SqliteStatement(db: SqliteDatabase) {
    fun parameterCount(): Int

    fun isReadOnly(): Boolean

    fun prepare(sql: String): Int

    fun bindIndex(name: String): Int

    fun bindNull(index:Int): Int

    fun bindText(index:Int, text: String): Int

    fun bindInt(index:Int, value: Int): Int

    fun bindLong(index:Int, value: Long): Int

    fun bindDouble(index:Int, value: Double): Int

    fun bindBytes(index:Int, array: ByteArray): Int

    fun step(): SqliteStepResult

    fun changes(): Int

    fun finalize(): Int

    fun clearBindings()

    fun reset()

    /**
     * The following functions are only useful when preparing and running a select statement.
     */
    fun expandedSql(): String

    fun isBusy(): Boolean

    fun columnCount(): Int

    fun dataCount(): Int

    fun columnName(index: Int): String

    fun columnDeclaredType(index: Int): String

    fun columnType(index: Int): SqliteColumnType

    fun columnText(index: Int): String

    fun columnBlob(index: Int): ByteArray

    fun columnDouble(index: Int): Double

    fun columnInt(index: Int): Int

    fun columnLong(index: Int): Long
}