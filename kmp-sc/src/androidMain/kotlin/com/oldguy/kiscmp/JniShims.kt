package com.oldguy.kiscmp

/**
 * Supports the driect interface to the Sqlite/Sqlcipher Api using JNI to the C++ code
 * in database.cpp that provides the external functions. The externals map one-to-one to the
 * sqlite api functions available in the C library. This class also contains methods called
 * by the JNI stuff to throw standard kotlin exceptions, and in at least one case, provide a
 * callback mechanism for the exec API.
 *
 * Long-term strategy is for ALL contact to JNI and from JNI back go through this class.
 *
 * Also to avoid kotlin release dependency issues as much as practical, only basic types are
 * passed back and forth; Int, Long, Double, etc, and String.  Any other usage (enums, sealed
 * classes lambdas, ...) are to be avoided here, just low-leve stuff.
 */
class Sqlite3JniShim() {
    // will be changed by open function, if non-zero it was set by the open process and is the
    // pointer value used by all the sqlite3 apis that operate on an open database.
    var handle: Long = 0
        private set

    private var callbackFun: ((
        values: Array<String>,
        columnNames: Array<String>) -> Int)? = null


    external fun error(): String

    external fun fileName(): String

    external fun open(path: String, readOnly: Boolean = false, createOk: Boolean = false): Int

    external fun close(): Int

    external fun softHeapLimit(limit: Long): Long

    external fun busyTimeout(timeout: Int)

    external fun exec(sql: String): Int

    fun exec(sql: String,
             callback: (
                 values: Array<String>,
                 columnNames: Array<String>) -> Int): Int {
        callbackFun = callback
        val rc = exec(sql)
        callbackFun = null
        return rc
    }

    external fun version(): String

    /**
     * Useful after an Insert statement when a ROWID is expected to be generated by Sqlite during
     * the insert
     */
    external fun lastInsertRowid(): Long

    external fun sleep(millis: Int)

    fun throwError(apiName: String, result: Int, message: String) {
        throw SqliteException(message, apiName, result)
    }

    fun callback(values: Array<String>,
                 columnNames: Array<String>) {
        callbackFun?.invoke(values, columnNames)
    }

    companion object {
        @JvmStatic private external fun nativeInit()

        init {
            System.loadLibrary("sqlcipher-kotlin")
            nativeInit()
        }
    }
}

/**
 * Enums seem to be problematic with kotlin and JNI, I had trouble getting signatures for valueOF function
 * that worked, Steps attempted and bailed on were:
 * 1) GetStaticMethodID valueOf, signature returns java.lang.Enum, not actual enum class
 *      "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;"
 * 2) CallStaticObjectMethod using enum name does return a valid jobject, but can't be decoded
 *  back into actual enum class - SIGABRT occurs.
 *
 *  So worked around the issue by not return enum types from external functions.
 */

class Sqlite3StatementJniShim() {
    private var handle: Long = 0  // will be changed by statement prepare function

    external fun parameterCount(): Int

    external fun isReadOnly(): Boolean

    external fun prepare(dbHandle: Long, sql: String): Int

    external fun bindIndex(name: String): Int

    external fun bindNull(index:Int): Int

    external fun bindText(index:Int, text: String): Int

    external fun bindInt(index:Int, value: Int): Int

    external fun bindLong(index:Int, value: Long): Int

    external fun bindDouble(index:Int, value: Double): Int

    external fun bindBytes(index:Int, array: ByteArray): Int

    external fun stepInt(): Int

    external fun changes(dbHandle: Long): Int

    external fun finalize(): Int

    external fun clearBindings()

    external fun reset()

    /**
     * The following functions are only useful when preparing and running a select statement.
     */
    external fun expandedSql(): String

    external fun isBusy(): Boolean

    external fun columnCount(): Int

    external fun dataCount(): Int

    external fun columnName(index: Int): String

    external fun columnDeclaredType(index: Int): String

    external fun columnTypeInt(index: Int): Int

    external fun columnText(index: Int): String

    external fun columnBlob(index: Int): ByteArray

    external fun columnDouble(index: Int): Double

    external fun columnInt(index: Int): Int

    external fun columnLong(index: Int): Long

    fun throwError(apiName: String, result: Int, message: String) {
        throw SqliteException(message, apiName, result)
    }

    fun throwError(apiName: String, result: Int, message: String, text: String) {
        throw SqliteException("$message, text: $text", apiName, result)
    }

    companion object {
        @JvmStatic private external fun nativeInit()

        init {
            nativeInit()
        }
    }
}