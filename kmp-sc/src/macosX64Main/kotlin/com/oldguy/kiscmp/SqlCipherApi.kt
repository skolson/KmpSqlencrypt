package com.oldguy.kiscmp

actual class SqliteDatabase: SqliteDatabaseNativeImpl() {

    actual override fun error(): String {
        return super.error()
    }

    actual override fun fileName(): String {
        return super.fileName()
    }

    actual fun open(
        path: String,
        readOnly: Boolean,
        createOk: Boolean
    ): Int {
        return super.openImpl(path, readOnly, createOk)
    }

    actual override fun close(): Int {
        return super.close()
    }

    actual override fun softHeapLimit(limit: Long): Long {
        return super.softHeapLimit(limit)
    }

    actual override fun busyTimeout(timeout: Int) {
        super.busyTimeout(timeout)
    }

    actual override fun exec(
        sql: String,
        callback: ((values: Array<String>, columnNames: Array<String>) -> Int)?
    ): Int {
        return super.exec(sql, callback)
    }

    actual override fun exec(sql: String): Int {
        return super.exec(sql)
    }

    actual override fun version(): String {
        return super.version()
    }

    /**
     * Useful after an Insert statement when a ROWID is expected to be generated by Sqlite during
     * the insert
     */
    actual override fun lastInsertRowid(): Long {
        return super.lastInsertRowid()
    }

    actual override fun sleep(millis: Int) {
        super.sleep(millis)
    }
}

actual class SqliteStatement actual constructor(db: SqliteDatabase)
    :SqliteStatementNativeImpl(db)
{
    actual override fun parameterCount(): Int {
        return super.parameterCount()
    }

    actual override fun isReadOnly(): Boolean {
        return super.isReadOnly()
    }

    actual override fun prepare(sql: String): Int {
        return super.prepare(sql)
    }

    actual override fun bindIndex(name: String): Int {
        return super.bindIndex(name)
    }

    actual override fun bindNull(index: Int): Int {
        return super.bindNull(index)
    }

    actual override fun bindText(index: Int, text: String): Int {
        return super.bindText(index, text)
    }

    actual override fun bindInt(index: Int, value: Int): Int {
        return super.bindInt(index, value)
    }

    actual override fun bindLong(index: Int, value: Long): Int {
        return super.bindLong(index, value)
    }

    actual override fun bindDouble(index: Int, value: Double): Int {
        return super.bindDouble(index, value)
    }

    actual override fun bindBytes(index: Int, array: ByteArray): Int {
        return super.bindBytes(index, array)
    }

    actual override fun step(): SqliteStepResult {
        return super.step()
    }

    actual override fun changes(): Int {
        return super.changes()
    }

    actual override fun finalize(): Int {
        return super.finalize()
    }

    actual override fun clearBindings() {
        super.clearBindings()
    }

    actual override fun reset() {
        super.reset()
    }

    /**
     * The following functions are only useful when preparing and running a select statement.
     */
    actual override fun expandedSql(): String {
        return super.expandedSql()
    }

    actual override fun isBusy(): Boolean {
        return super.isBusy()
    }

    actual override fun columnCount(): Int {
        return super.columnCount()
    }

    actual override fun dataCount(): Int {
        return super.dataCount()
    }

    actual override fun columnName(index: Int): String {
        return super.columnName(index)
    }

    actual override fun columnDeclaredType(index: Int): String {
        return super.columnDeclaredType(index)
    }

    actual override fun columnType(index: Int): SqliteColumnType {
        return super.columnType(index)
    }

    actual override fun columnText(index: Int): String {
        return super.columnText(index)
    }

    actual override fun columnBlob(index: Int): ByteArray {
        return super.columnBlob(index)
    }

    actual override fun columnDouble(index: Int): Double {
        return super.columnDouble(index)
    }

    actual override fun columnInt(index: Int): Int {
        return super.columnInt(index)
    }

    actual override fun columnLong(index: Int): Long {
        return super.columnLong(index)
    }
}